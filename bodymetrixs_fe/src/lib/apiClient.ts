import axios from 'axios';
import { supabase } from './supabase';

// Ëé∑ÂèñÊ≠£Á°ÆÁöÑ API Âü∫Á°Ä URL
function getApiBaseUrl(): string {
  // ‰ºòÂÖà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè
  if (import.meta.env.VITE_API_BASE_URL) {
    return import.meta.env.VITE_API_BASE_URL;
  }
  
  // Â§áÁî®ÊñπÊ°àÔºö‰ΩøÁî®ÈªòËÆ§ÁöÑÂêéÁ´ØÂú∞ÂùÄ
  return 'http://localhost:3000/api';
}

const apiClient = axios.create({
  baseURL: getApiBaseUrl(),
});

// Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
console.log('üîß API Client ÈÖçÁΩÆ:', {
  baseURL: getApiBaseUrl(),
  env: import.meta.env.VITE_API_BASE_URL ? 'Â∑≤ËÆæÁΩÆ' : '‰ΩøÁî®ÈªòËÆ§ÂÄº',
  fullUrl: `${getApiBaseUrl()}/create-checkout`
});

// Request interceptor to add the Supabase auth token to headers
apiClient.interceptors.request.use(
  async (config) => {
    // Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
    console.log('üì§ ÂèëÈÄÅ API ËØ∑Ê±Ç:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      baseURL: config.baseURL,
      fullUrl: `${config.baseURL}${config.url}`,
      headers: config.headers
    });
    
    const { data: { session } } = await supabase.auth.getSession();
    const token = session?.access_token;

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('‚úÖ Â∑≤Ê∑ªÂä†ËÆ§ËØÅ token');
    } else {
      console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞ËÆ§ËØÅ token');
    }
    return config;
  },
  (error) => {
    console.error('‚ùå ËØ∑Ê±ÇÊã¶Êà™Âô®ÈîôËØØ:', error);
    return Promise.reject(error);
  }
);

// Response interceptor to handle errors better
apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ API ÂìçÂ∫îÊàêÂäü:', {
      status: response.status,
      url: response.config.url,
      baseURL: response.config.baseURL,
      fullUrl: `${response.config.baseURL}${response.config.url}`,
      data: response.data
    });
    return response;
  },
  (error) => {
    console.error('‚ùå API Error:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      url: error.config?.url,
      baseURL: error.config?.baseURL,
      fullUrl: error.config?.baseURL + error.config?.url,
      data: error.response?.data,
      message: error.message
    });
    return Promise.reject(error);
  }
);

// The Supabase client handles token refresh automatically.
// The onAuthStateChange listener in App.tsx will handle logout on session expiry.

export default apiClient; 